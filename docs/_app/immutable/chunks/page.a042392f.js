import{s as h,f as i,a as A,g as D,x as C,c as d,j as F,k as g,i as o,r as u,d as t}from"./scheduler.6381a9b9.js";import{S as x,i as T}from"./index.cf31950d.js";function B(b){let n,m=`Library internally works with pure javascript <code>Date</code> objects. But value you can bind must be string. It makes reasoning
about easier and makes library free from another dependency.`,r,e,E=`Therefore if you really want to set initial value as <code>Date</code> object you can use <code>initialDate</code> property. But you have been
warned. Timezone differences between SSR and client are not taken into account.`,c,l,f=`Lirary uses 2 method for conversion <code>string</code> to <code>Date</code> and vice versa. These methods are exported from library to be
available if needed.`,y,a,v=`<code><span class="line"><span style="color: #6A9955">/**</span></span>
<span class="line"><span style="color: #6A9955"> * String -&gt; date</span></span>
<span class="line"><span style="color: #6A9955"> *</span></span>
<span class="line"><span style="color: #6A9955"> * </span><span style="color: #569CD6">@param</span><span style="color: #6A9955"> </span><span style="color: #4EC9B0">{Date|string}</span><span style="color: #6A9955"> </span><span style="color: #9CDCFE">date</span></span>
<span class="line"><span style="color: #6A9955"> * </span><span style="color: #569CD6">@param</span><span style="color: #6A9955"> </span><span style="color: #4EC9B0">{string}</span><span style="color: #6A9955"> </span><span style="color: #9CDCFE">format</span></span>
<span class="line"><span style="color: #6A9955"> * </span><span style="color: #569CD6">@param</span><span style="color: #6A9955"> </span><span style="color: #4EC9B0">{i18nType}</span><span style="color: #6A9955"> </span><span style="color: #9CDCFE">i18n</span></span>
<span class="line"><span style="color: #6A9955"> * </span><span style="color: #569CD6">@param</span><span style="color: #6A9955"> </span><span style="color: #4EC9B0">{string}</span><span style="color: #6A9955"> </span><span style="color: #9CDCFE">type</span></span>
<span class="line"><span style="color: #6A9955"> * </span><span style="color: #569CD6">@returns</span><span style="color: #6A9955"> </span><span style="color: #4EC9B0">{Date}</span></span>
<span class="line"><span style="color: #6A9955"> */</span></span>
<span class="line"><span style="color: #C586C0">export</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">function</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA">parseDate</span><span style="color: #D4D4D4">(</span><span style="color: #9CDCFE">date</span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE">format</span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE">i18n</span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE">type</span><span style="color: #D4D4D4">) { </span><span style="color: #6A9955">/* ... */</span><span style="color: #D4D4D4">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A9955">/**</span></span>
<span class="line"><span style="color: #6A9955"> * Date -&gt; string</span></span>
<span class="line"><span style="color: #6A9955"> *</span></span>
<span class="line"><span style="color: #6A9955"> * </span><span style="color: #569CD6">@param</span><span style="color: #6A9955"> </span><span style="color: #4EC9B0">{Date}</span><span style="color: #6A9955"> </span><span style="color: #9CDCFE">date</span></span>
<span class="line"><span style="color: #6A9955"> * </span><span style="color: #569CD6">@param</span><span style="color: #6A9955"> </span><span style="color: #4EC9B0">{string}</span><span style="color: #6A9955"> </span><span style="color: #9CDCFE">format</span></span>
<span class="line"><span style="color: #6A9955"> * </span><span style="color: #569CD6">@param</span><span style="color: #6A9955"> </span><span style="color: #4EC9B0">{i18nType}</span><span style="color: #6A9955"> </span><span style="color: #9CDCFE">i18n</span></span>
<span class="line"><span style="color: #6A9955"> * </span><span style="color: #569CD6">@param</span><span style="color: #6A9955"> </span><span style="color: #4EC9B0">{string}</span><span style="color: #6A9955"> </span><span style="color: #9CDCFE">type</span></span>
<span class="line"><span style="color: #6A9955"> * </span><span style="color: #569CD6">@returns</span><span style="color: #6A9955"> </span><span style="color: #4EC9B0">{string}</span></span>
<span class="line"><span style="color: #6A9955"> */</span></span>
<span class="line"><span style="color: #C586C0">export</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">function</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA">formatDate</span><span style="color: #D4D4D4">(</span><span style="color: #9CDCFE">date</span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE">format</span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE">i18n</span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE">type</span><span style="color: #D4D4D4">) { </span><span style="color: #6A9955">/* ... */</span><span style="color: #D4D4D4">}</span></span></code>`;return{c(){n=i("p"),n.innerHTML=m,r=A(),e=i("p"),e.innerHTML=E,c=A(),l=i("p"),l.innerHTML=f,y=A(),a=i("pre"),a.innerHTML=v,this.h()},l(s){n=D(s,"P",{"data-svelte-h":!0}),C(n)!=="svelte-uvoawj"&&(n.innerHTML=m),r=d(s),e=D(s,"P",{"data-svelte-h":!0}),C(e)!=="svelte-1vrl61s"&&(e.innerHTML=E),c=d(s),l=D(s,"P",{"data-svelte-h":!0}),C(l)!=="svelte-v34n52"&&(l.innerHTML=f),y=d(s),a=D(s,"PRE",{class:!0,style:!0,tabindex:!0,"data-svelte-h":!0}),C(a)!=="svelte-1a533wo"&&(a.innerHTML=v),this.h()},h(){F(a,"class","shiki dark-plus"),g(a,"background-color","#1E1E1E"),F(a,"tabindex","0")},m(s,p){o(s,n,p),o(s,r,p),o(s,e,p),o(s,c,p),o(s,l,p),o(s,y,p),o(s,a,p)},p:u,i:u,o:u,d(s){s&&(t(n),t(r),t(e),t(c),t(l),t(y),t(a))}}}const k={title:"Working with dates"};class w extends x{constructor(n){super(),T(this,n,null,B,h,{})}}export{w as default,k as metadata};
